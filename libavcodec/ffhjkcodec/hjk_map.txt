

/*hjk_EncEncodePicture*/
typedef struct _HJK_ENC_PIC_PARAMS {
    int version; // HJK_ENC_PIC_PARAMS_VER;
    HJK_ENC_INPUT_PTR inputBuffer; --> HJK_ENC_REGISTER_RESOURCE m_list_enc_reg_res[i];
    int bufferFmt;
    int inputWidth;
    int inputHeight;
    int inputPitch;
    HJK_ENC_OUTPUT_PTR outputBitstream; --> HjkEncoderInterOut
    int pictureStruct;  // HJK_ENC_PIC_STRUCT;
    int inputTimeStamp; // frame->pts;
    int encodePicFlags; // HJK_ENC_PIC_FLAG;
    CODEC_PIC_PARAMS codecPicParams;
} HJK_ENC_PIC_PARAMS;



														typedef struct HjkencSurface	
                                                        {
                                                            HJK_ENC_INPUT_PTR input_surface;
                                                            AVFrame *in_ref;
                                                            int reg_idx;
                                                            int width;
typedef struct _HJK_ENC_LOCK_BITSTREAM {                    int height;
    int version; // HJK_ENC_LOCK_BITSTREAM_VER;             int pitch;
    int doNotWait;                                      
    HJK_ENC_OUTPUT_PTR outputBitstream; ----------------->  HJK_ENC_OUTPUT_PTR output_surface; /* decode out, point to internal info */
    uint32_t *sliceOffsets;                                 HJK_ENC_BUFFER_FORMAT format;
    int64_t bitstreamSizeInBytes;/*encoder data length*/    int size;
    void *bitstreamBufferPtr;/* encoder data */         } HjkencSurface;
    int pictureType;
    int frameAvgQP;
    int outputTimeStamp;
} HJK_ENC_LOCK_BITSTREAM; /* hjk_EncLockBitstream */



typedef struct HjkencSurface
{
    HJK_ENC_INPUT_PTR input_surface; --> ctx->registered_frames[reg_idx].in_map.mappedResource --> m_list_enc_reg_res[i] /*hjk_EncMapInputResource*/
    AVFrame *in_ref;
    int reg_idx;
    int width;
    int height;									
    int pitch;									typedef struct _HJK_ENC_CREATE_BITSTREAM_BUFFER {
												    int version;
    HJK_ENC_OUTPUT_PTR output_surface;  ----------> void *bitstreamBuffer;  ------> typedef struct _HjkEncoderInterOut {/* malloc hjk_EncCreateBitstreamBuffer */
    HJK_ENC_BUFFER_FORMAT format;                   int size;                           void *m_enc_out_virtual_addr;
    int size;                                   } HJK_ENC_CREATE_BITSTREAM_BUFFER;      int m_enc_out_size;
} HjkencSurface;                                                                        int m_enc_data_len;
																			        } HjkEncoderInterOut;
																						
					
												typedef struct _HJK_ENC_REGISTER_RESOURCE {
                                                    int version; // HJK_ENC_REGISTER_RESOURCE_VER;
                                                    int width;
                                                    int height;
                                                    int pitch;
                                                    void *resourceToRegister; /*  = frame->data[0] <-- HjkFunctions(hjMemAlloc)*/
					                                int resourceType; // HJK_ENC_INPUT_RESOURCE_TYPE_HJKDEVICEPTR
struct {                                                              // HJK_ENC_INPUT_RESOURCE_TYPE_DIRECTX
	void *ptr; /* = frame->data[0] */               intptr_t subResourceIndex;
	int ptr_index;                                  HJK_ENC_BUFFER_FORMAT bufferFormat;
	HJK_ENC_REGISTERED_PTR regptr; ---------------->HJK_ENC_REGISTERED_PTR registeredResource; ----> HJK_ENC_REGISTER_RESOURCE &m_list_enc_reg_res[i] 
                                                } HJK_ENC_REGISTER_RESOURCE; /* hjk_EncRegisterResource */
	
	int mapped;
	HJK_ENC_MAP_INPUT_RESOURCE in_map;   --------> typedef struct _HJK_ENC_MAP_INPUT_RESOURCE {
} registered_frames[MAX_REGISTERED_FRAMES];            int version; // HJK_ENC_MAP_INPUT_RESOURCE_VER;
                                                       HJK_ENC_REGISTERED_PTR registeredResource; /* --> HJK_ENC_REGISTERED_PTR regptr */
                                                       HJK_ENC_INPUT_PTR mappedResource; ----> HJK_ENC_REGISTER_RESOURCE m_list_enc_reg_res[i]; 
                                                       HJK_ENC_BUFFER_FORMAT mappedBufferFmt;
                                                   } HJK_ENC_MAP_INPUT_RESOURCE;


/*encoder process start*/
309 hjk_load_functions
16 hj_Init
30 hj_DeviceGet
65 hj_CtxCreate
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
129 hj_MemAlloc size=3110400
89 hj_CtxPopCurrent
309 hjk_load_functions
895 hjkenc_load_functions
867 hjk_EncodeAPIGetMaxSupportedVersion
879 hjk_EncodeAPICreateInstance
337 hjk_EncOpenEncodeSessionEx
354 hjk_EncGetEncodeGUIDCount
368 hjk_EncGetEncodeGUIDs
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
386 hjk_EncGetEncodeCaps
434 hjk_EncGetEncodePresetConfig
108 hj_CtxPushCurrent
442 hjk_EncInitializeEncoder
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
483 hjk_EncCreateBitstreamBuffer
530 hjk_EncCreateBitstreamBuffer allocOut->bitstreamBuffer=0x7fffe101be10 m_enc_out_virtual_addr=0x7fdf3a490010
483 hjk_EncCreateBitstreamBuffer
530 hjk_EncCreateBitstreamBuffer allocOut->bitstreamBuffer=0x7fffe101bb00 m_enc_out_virtual_addr=0x7fdf3a090010
483 hjk_EncCreateBitstreamBuffer
530 hjk_EncCreateBitstreamBuffer allocOut->bitstreamBuffer=0x7fffe101bb50 m_enc_out_virtual_addr=0x7fdf39c90010
483 hjk_EncCreateBitstreamBuffer
530 hjk_EncCreateBitstreamBuffer allocOut->bitstreamBuffer=0x7fffe101b840 m_enc_out_virtual_addr=0x7fdf39890010
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
171 hj_Memcpy2DAsync
171 hj_Memcpy2DAsync
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
libavcodec/hjkenc.c:hjkenc_find_free_reg_resource:1569: ctx->nb_registered_frames=0

546 hjk_EncRegisterResource
577 hjk_EncMapInputResource
588 hjk_EncMapInputResource map find ok
libavcodec/hjkenc.c:hjkenc_upload_frame:1682:  +++ ctx->registered_frames[reg_idx].mapped=1
libavcodec/hjkenc.c:hjkenc_upload_frame:1689: reg_idx=0
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
627 hjk_EncEncodePicture
634 hjk_EncEncodePicture in buf p_enc_reg_res->resourceToRegister=0x7fdf3a890010
636 hjk_EncEncodePicture out buf params->outputBitstream=0x7fffe101be10
89 hj_CtxPopCurrent
libavcodec/hjkenc.c:ff_hjkenc_send_frame:2171: queue to ready
libavcodec/hjkenc.c:output_ready:1934: nb_ready=1 nb_pending=0 flush=0

[mjpeg_hjkenc @ 0x7fffe1019be0] EAGAIN
108 hj_CtxPushCurrent
627 hjk_EncEncodePicture
89 hj_CtxPopCurrent
libavcodec/hjkenc.c:output_ready:1934: nb_ready=1 nb_pending=0 flush=1

108 hj_CtxPushCurrent
699 hjk_EncLockBitstream
711 hjk_EncLockBitstream outputBitstream=0x7fffe101be10  m_enc_out_virtual_addr=0x7fdf3a490010
721 hjk_EncUnlockBitstream
libavcodec/hjkenc.c:process_output_surface:1855: ---- ctx->registered_frames[tmpoutsurf->reg_idx].mapped=1
739 hjk_EncUnmapInputResource
752 hjk_EncUnmapInputResource unmap find ok
89 hj_CtxPopCurrent
libavcodec/hjkenc.c:output_ready:1934: nb_ready=0 nb_pending=0 flush=1

[mjpeg_hjkenc @ 0x7fffe1019be0] encoder_flushing eof
108 hj_CtxPushCurrent
627 hjk_EncEncodePicture
764 hjk_EncUnregisterResource
775 hjk_EncUnregisterResource find ok, release i resource
787 hjk_EncDestroyBitstreamBuffer
787 hjk_EncDestroyBitstreamBuffer
787 hjk_EncDestroyBitstreamBuffer
787 hjk_EncDestroyBitstreamBuffer
807 hjk_EncDestroyEncoder
89 hj_CtxPopCurrent
905 hjkenc_free_functions
916 hjk_free_functions
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
221 hj_MemFree
89 hj_CtxPopCurrent
232 hj_CtxDestroy
916 hjk_free_functions
/*encoder process end*/


/*decode process start*/
309 hjk_load_functions
16 hj_Init
30 hj_DeviceGet
65 hj_CtxCreate
89 hj_CtxPopCurrent
276 ff_hjkdec_decode_init
1110 hjvid_load_functions
108 hj_CtxPushCurrent
976 hj_vidGetDecoderCaps
995 hj_vidCreateDecoder
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
1022 hj_vidDecodePicture
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
1060 hj_vidMapVideoFrame
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
180 hj_Memcpy2DAsync
180 hj_Memcpy2DAsync
202 hj_StreamSynchronize
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
1074 hj_vidUnmapVideoFrame
89 hj_CtxPopCurrent
108 hj_CtxPushCurrent
1087 hj_vidDestroyDecoder
89 hj_CtxPopCurrent
1122 hjvid_free_functions
232 hj_CtxDestroy
916 hjk_free_functions

/*decode process end*/
												   