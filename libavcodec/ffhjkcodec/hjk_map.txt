

/*hjk_EncEncodePicture*/
typedef struct _HJK_ENC_PIC_PARAMS {
    int version; // HJK_ENC_PIC_PARAMS_VER;
    HJK_ENC_INPUT_PTR inputBuffer; --> HJK_ENC_REGISTER_RESOURCE m_list_enc_reg_res[i];
    int bufferFmt;
    int inputWidth;
    int inputHeight;
    int inputPitch;
    HJK_ENC_OUTPUT_PTR outputBitstream; --> HjkEncoderInterOut
    int pictureStruct;  // HJK_ENC_PIC_STRUCT;
    int inputTimeStamp; // frame->pts;
    int encodePicFlags; // HJK_ENC_PIC_FLAG;
    CODEC_PIC_PARAMS codecPicParams;
} HJK_ENC_PIC_PARAMS;



														typedef struct HjkencSurface	
                                                        {
                                                            HJK_ENC_INPUT_PTR input_surface;
                                                            AVFrame *in_ref;
                                                            int reg_idx;
                                                            int width;
typedef struct _HJK_ENC_LOCK_BITSTREAM {                    int height;
    int version; // HJK_ENC_LOCK_BITSTREAM_VER;             int pitch;
    int doNotWait;                                      
    HJK_ENC_OUTPUT_PTR outputBitstream; ----------------->  HJK_ENC_OUTPUT_PTR output_surface; /* decode out, point to internal info */
    uint32_t *sliceOffsets;                                 HJK_ENC_BUFFER_FORMAT format;
    int64_t bitstreamSizeInBytes;/*encoder data length*/    int size;
    void *bitstreamBufferPtr;/* encoder data */         } HjkencSurface;
    int pictureType;
    int frameAvgQP;
    int outputTimeStamp;
} HJK_ENC_LOCK_BITSTREAM; /* hjk_EncLockBitstream */



typedef struct HjkencSurface
{
    HJK_ENC_INPUT_PTR input_surface; --> ctx->registered_frames[reg_idx].in_map.mappedResource --> m_list_enc_reg_res[i] /*hjk_EncMapInputResource*/
    AVFrame *in_ref;
    int reg_idx;
    int width;
    int height;									
    int pitch;									typedef struct _HJK_ENC_CREATE_BITSTREAM_BUFFER {
												    int version;
    HJK_ENC_OUTPUT_PTR output_surface;  ----------> void *bitstreamBuffer;  ------> typedef struct _HjkEncoderInterOut {/* malloc hjk_EncCreateBitstreamBuffer */
    HJK_ENC_BUFFER_FORMAT format;                   int size;                           void *m_enc_out_virtual_addr;
    int size;                                   } HJK_ENC_CREATE_BITSTREAM_BUFFER;      int m_enc_out_size;
} HjkencSurface;                                                                        int m_enc_data_len;
																			        } HjkEncoderInterOut;
																						
					
												typedef struct _HJK_ENC_REGISTER_RESOURCE {
                                                    int version; // HJK_ENC_REGISTER_RESOURCE_VER;
                                                    int width;
                                                    int height;
                                                    int pitch;
                                                    void *resourceToRegister; /*  = frame->data[0] <-- HjkFunctions(hjMemAlloc)*/
					                                int resourceType; // HJK_ENC_INPUT_RESOURCE_TYPE_HJKDEVICEPTR
struct {                                                              // HJK_ENC_INPUT_RESOURCE_TYPE_DIRECTX
	void *ptr; /* = frame->data[0] */               intptr_t subResourceIndex;
	int ptr_index;                                  HJK_ENC_BUFFER_FORMAT bufferFormat;
	HJK_ENC_REGISTERED_PTR regptr; ---------------->HJK_ENC_REGISTERED_PTR registeredResource; ----> HJK_ENC_REGISTER_RESOURCE &m_list_enc_reg_res[i] 
                                                } HJK_ENC_REGISTER_RESOURCE; /* hjk_EncRegisterResource */
	
	int mapped;
	HJK_ENC_MAP_INPUT_RESOURCE in_map;   --------> typedef struct _HJK_ENC_MAP_INPUT_RESOURCE {
} registered_frames[MAX_REGISTERED_FRAMES];            int version; // HJK_ENC_MAP_INPUT_RESOURCE_VER;
                                                       HJK_ENC_REGISTERED_PTR registeredResource; /* --> HJK_ENC_REGISTERED_PTR regptr */
                                                       HJK_ENC_INPUT_PTR mappedResource; ----> HJK_ENC_REGISTER_RESOURCE m_list_enc_reg_res[i]; 
                                                       HJK_ENC_BUFFER_FORMAT mappedBufferFmt;
                                                   } HJK_ENC_MAP_INPUT_RESOURCE;
												   